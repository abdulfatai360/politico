{"version":3,"sources":["../src/migration.js"],"names":["dotenv","config","pool","Pool","connectionString","process","env","DATABASE_URL","queryDatabase","queryText","query","dbResponse","console","log","end","on","createPartyTable","createOfficeTable","dropPartyTable","dropOfficeTable","exit","require"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEAA,gBAAOC,MAAP;;AACA,IAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAS;AACpBC,EAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADV,CAAT,CAAb;;SAIeC,a;;;;;;;0BAAf,iBAA6BC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE6BP,IAAI,CAACQ,KAAL,CAAWD,SAAX,CAF7B;;AAAA;AAEUE,YAAAA,UAFV;AAGIC,YAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAT,YAAAA,IAAI,CAACY,GAAL;AAJJ;AAAA;;AAAA;AAAA;AAAA;AAMIF,YAAAA,OAAO,CAACC,GAAR;AACAX,YAAAA,IAAI,CAACY,GAAL;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWAZ,IAAI,CAACa,EAAL,CAAQ,SAAR,EAAmB,YAAM;AACvBH,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,CAFD;;SAIeG,gB;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQP,YAAAA,SADR;AAQED,YAAAA,aAAa,CAACC,SAAD,CAAb;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAWeQ,iB;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQR,YAAAA,SADR;AAOED,YAAAA,aAAa,CAACC,SAAD,CAAb;;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAUeS,c;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQT,YAAAA,SADR,GACoB,4BADpB;AAEED,YAAAA,aAAa,CAACC,SAAD,CAAb;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAKeU,e;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQV,YAAAA,SADR,GACoB,6BADpB;AAEED,YAAAA,aAAa,CAACC,SAAD,CAAb;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAKAP,IAAI,CAACa,EAAL,CAAQ,QAAR,EAAkB,YAAM;AACtBH,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAR,EAAAA,OAAO,CAACe,IAAR,CAAa,CAAb;AACD,CAHD;;AAYAC,OAAO,CAAC,eAAD,CAAP","sourcesContent":["import '@babel/polyfill';\r\nimport { Pool } from 'pg';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL,\r\n});\r\n\r\nasync function queryDatabase(queryText) {\r\n  try {\r\n    const dbResponse = await pool.query(queryText);\r\n    console.log(dbResponse);\r\n    pool.end();\r\n  } catch (error) {\r\n    console.log(error);\r\n    pool.end();\r\n  }\r\n}\r\n\r\npool.on('connect', () => {\r\n  console.log('Connected to Database');\r\n});\r\n\r\nasync function createPartyTable() {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS party (\r\n    id SERIAL PRIMARY KEY,\r\n    name VARCHAR(255) NOT NULL UNIQUE,\r\n    hq_address VARCHAR NOT NULL,\r\n    logo_url VARCHAR NOT NULL\r\n  )`;\r\n\r\n  queryDatabase(queryText);\r\n}\r\n\r\nasync function createOfficeTable() {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS office (\r\n    id SERIAL PRIMARY KEY,\r\n    type VARCHAR(128) NOT NULL,\r\n    name VARCHAR(255) NOT NULL UNIQUE\r\n  )`;\r\n\r\n  queryDatabase(queryText);\r\n}\r\n\r\nasync function dropPartyTable() {\r\n  const queryText = 'DROP TABLE IF EXISTS party';\r\n  queryDatabase(queryText);\r\n}\r\n\r\nasync function dropOfficeTable() {\r\n  const queryText = 'DROP TABLE IF EXISTS office';\r\n  queryDatabase(queryText);\r\n}\r\n\r\npool.on('remove', () => {\r\n  console.log('Database client disconnected');\r\n  process.exit(0);\r\n});\r\n\r\nexport {\r\n  createPartyTable,\r\n  createOfficeTable,\r\n  dropPartyTable,\r\n  dropOfficeTable,\r\n};\r\n\r\nrequire('make-runnable');\r\n"],"file":"migration.js"}