{"version":3,"sources":["../../src/models/index.js"],"names":["dotenv","config","connectionString","process","env","NODE_ENV","DATABASE_URL_TEST","DATABASE_URL","pool","Pool","on","console","log","query","queryText","dbResponse","createPartyTable","createOfficeTable","createUsersTable","createCandidatesTable","dropPartyTable","dropOfficeTable","dropUsersTable","createAllTables","dropAllTables","module","exports","require"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;AAEAA,gBAAOC,MAAP;;AAEA,IAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,GAAkCF,OAAO,CAACC,GAAR,CAAYE,iBAA9C,GAAkEH,OAAO,CAACC,GAAR,CAAYG,YAAvG;AAEA,IAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAS;AAAEP,EAAAA,gBAAgB,EAAhBA;AAAF,CAAT,CAAb;AAEAM,IAAI,CAACE,EAAL,CAAQ,SAAR,EAAmB,YAAM;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,CAFD;;SAIeC,K;;;;;;;0BAAf,iBAAqBC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE6BN,IAAI,CAACK,KAAL,CAAWC,SAAX,CAF7B;;AAAA;AAEUC,YAAAA,UAFV;AAGIJ,YAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ,EAHJ,CAII;;AAJJ;AAAA;;AAAA;AAAA;AAAA;AAMIJ,YAAAA,OAAO,CAACC,GAAR,cANJ,CAOI;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAWeI,gB;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQF,YAAAA,SADR;AAQED,YAAAA,KAAK,CAACC,SAAD,CAAL;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAWeG,iB;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQH,YAAAA,SADR;AAOED,YAAAA,KAAK,CAACC,SAAD,CAAL;;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAUeI,gB;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQJ,YAAAA,SADR;AAaED,YAAAA,KAAK,CAACC,SAAD,CAAL;;AAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAgBeK,qB;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQL,YAAAA,SADR;AASED,YAAAA,KAAK,CAACC,SAAD,CAAL;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAYeM,c;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQN,YAAAA,SADR,GACoB,4BADpB;AAEED,YAAAA,KAAK,CAACC,SAAD,CAAL;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAKeO,e;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQP,YAAAA,SADR,GACoB,6BADpB;AAEED,YAAAA,KAAK,CAACC,SAAD,CAAL;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAKeQ,c;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQR,YAAAA,SADR,GACoB,4BADpB;AAEED,YAAAA,KAAK,CAACC,SAAD,CAAL;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAKA,IAAMS,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BP,EAAAA,gBAAgB;AAChBC,EAAAA,iBAAiB;AACjBC,EAAAA,gBAAgB;AAChBC,EAAAA,qBAAqB,GAJO,CAK5B;AACD,CAND;;AASA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BJ,EAAAA,cAAc;AACdC,EAAAA,eAAe;AACfC,EAAAA,cAAc,GAHY,CAI1B;AACD,CALD;;AAOAd,IAAI,CAACE,EAAL,CAAQ,QAAR,EAAkB,YAAM;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EADsB,CAEtB;AACD,CAHD;AAKAa,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,gBAAgB,EAAhBA,gBADe;AAEfC,EAAAA,iBAAiB,EAAjBA,iBAFe;AAGfC,EAAAA,gBAAgB,EAAhBA,gBAHe;AAIfK,EAAAA,eAAe,EAAfA,eAJe;AAKfH,EAAAA,cAAc,EAAdA,cALe;AAMfC,EAAAA,eAAe,EAAfA,eANe;AAOfC,EAAAA,cAAc,EAAdA,cAPe;AAQfE,EAAAA,aAAa,EAAbA;AARe,CAAjB;;AAYAG,OAAO,CAAC,eAAD,CAAP","sourcesContent":["import '@babel/polyfill';\r\nimport { Pool } from 'pg';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst connectionString = process.env.NODE_ENV === 'test' ? process.env.DATABASE_URL_TEST : process.env.DATABASE_URL;\r\n\r\nconst pool = new Pool({ connectionString });\r\n\r\npool.on('connect', () => {\r\n  console.log('Connected to Database');\r\n});\r\n\r\nasync function query(queryText) {\r\n  try {\r\n    const dbResponse = await pool.query(queryText);\r\n    console.log(dbResponse);\r\n    // pool.end();\r\n  } catch (error) {\r\n    console.log(error);\r\n    // pool.end();\r\n  }\r\n}\r\n\r\nasync function createPartyTable() {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS party (\r\n    id SERIAL PRIMARY KEY,\r\n    name VARCHAR(255) UNIQUE NOT NULL,\r\n    hq_address VARCHAR NOT NULL,\r\n    logo_url VARCHAR NOT NULL\r\n  )`;\r\n\r\n  query(queryText);\r\n}\r\n\r\nasync function createOfficeTable() {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS office (\r\n    id SERIAL PRIMARY KEY,\r\n    type VARCHAR(128) NOT NULL,\r\n    name VARCHAR(255) UNIQUE NOT NULL\r\n  )`;\r\n\r\n  query(queryText);\r\n}\r\n\r\nasync function createUsersTable() {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS users (\r\n    id SERIAL PRIMARY KEY,\r\n    first_name VARCHAR(255) NOT NULL,\r\n    last_name VARCHAR(255) NOT NULL,\r\n    other_name VARCHAR(255),\r\n    email VARCHAR(255) UNIQUE NOT NULL,\r\n    password VARCHAR NOT NULL,\r\n    phone_number VARCHAR(128) NOT NULL,\r\n    passport_url VARCHAR NOT NULL,\r\n    is_admin BOOLEAN\r\n  )`;\r\n\r\n  query(queryText);\r\n}\r\n\r\nasync function createCandidatesTable() {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS candidates (\r\n    id SERIAL,\r\n    office INTEGER UNIQUE NOT NULL REFERENCES office(id),\r\n    party INTEGER NOT NULL REFERENCES party(id),\r\n    candidate INTEGER UNIQUE NOT NULL REFERENCES users(id),\r\n    PRIMARY KEY (office, candidate)\r\n  )`;\r\n\r\n  query(queryText);\r\n}\r\n\r\nasync function dropPartyTable() {\r\n  const queryText = 'DROP TABLE IF EXISTS party';\r\n  query(queryText);\r\n}\r\n\r\nasync function dropOfficeTable() {\r\n  const queryText = 'DROP TABLE IF EXISTS office';\r\n  query(queryText);\r\n}\r\n\r\nasync function dropUsersTable() {\r\n  const queryText = 'DROP TABLE IF EXISTS users';\r\n  query(queryText);\r\n}\r\n\r\nconst createAllTables = () => {\r\n  createPartyTable();\r\n  createOfficeTable();\r\n  createUsersTable();\r\n  createCandidatesTable()\r\n  // pool.end();\r\n};\r\n\r\n\r\nconst dropAllTables = () => {\r\n  dropPartyTable();\r\n  dropOfficeTable();\r\n  dropUsersTable();\r\n  // pool.end();\r\n};\r\n\r\npool.on('remove', () => {\r\n  console.log('Database client disconnected');\r\n  // process.exit(0);\r\n});\r\n\r\nmodule.exports = {\r\n  createPartyTable,\r\n  createOfficeTable,\r\n  createUsersTable,\r\n  createAllTables,\r\n  dropPartyTable,\r\n  dropOfficeTable,\r\n  dropUsersTable,\r\n  dropAllTables,\r\n\r\n};\r\n\r\nrequire('make-runnable');\r\n"],"file":"index.js"}