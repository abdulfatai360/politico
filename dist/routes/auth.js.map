{"version":3,"sources":["../../src/routes/auth.js"],"names":["router","express","Router","dotenv","config","post","req","res","password","body","bcrypt","genSalt","salt","hash","queryText","values","firstname","lastname","othername","email","phoneNumber","passportUrl","isAdmin","db","query","rows","token","jwt","sign","process","env","JWT_PRIVATE_KEY","status","json","data","user","error","detail"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,iBAAQC,MAAR,EAAf;;AACAC,gBAAOC,MAAP;;AAEAJ,MAAM,CAACK,IAAP,CAAY,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,QADO,GACMF,GAAG,CAACG,IADV,CACPD,QADO;AAAA;AAAA,mBAEIE,kBAAOC,OAAP,CAAe,EAAf,CAFJ;;AAAA;AAETC,YAAAA,IAFS;AAAA;AAAA,mBAGIF,kBAAOG,IAAP,CAAYL,QAAZ,EAAsBI,IAAtB,CAHJ;;AAAA;AAGTC,YAAAA,IAHS;AAKTC,YAAAA,SALS;AAiBTC,YAAAA,MAjBS,GAiBA,CACbT,GAAG,CAACG,IAAJ,CAASO,SADI,EAEbV,GAAG,CAACG,IAAJ,CAASQ,QAFI,EAGbX,GAAG,CAACG,IAAJ,CAASS,SAHI,EAIbZ,GAAG,CAACG,IAAJ,CAASU,KAJI,EAKbN,IALa,EAMbP,GAAG,CAACG,IAAJ,CAASW,WANI,EAObd,GAAG,CAACG,IAAJ,CAASY,WAPI,EAQbf,GAAG,CAACG,IAAJ,CAASa,OARI,CAjBA;AAAA;AAAA;AAAA,mBA6BUC,kBAAGC,KAAH,CAASV,SAAT,EAAoBC,MAApB,CA7BV;;AAAA;AAAA;AA6BLU,YAAAA,IA7BK,SA6BLA,IA7BK;AA8BPC,YAAAA,KA9BO,GA8BCC,sBAAIC,IAAJ,CAASH,IAAI,CAAC,CAAD,CAAb,EAAkBI,OAAO,CAACC,GAAR,CAAYC,eAA9B,CA9BD;AAAA,6CAgCNxB,GAAG,CAACyB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAAA,MAAM,EAAE,GADkB;AAE1BE,cAAAA,IAAI,EAAE,CAAC;AACLR,gBAAAA,KAAK,EAALA,KADK;AAELS,gBAAAA,IAAI,EAAEV,IAAI,CAAC,CAAD;AAFL,eAAD;AAFoB,aAArB,CAhCM;;AAAA;AAAA;AAAA;AAAA,6CAwCNlB,GAAG,CAACyB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAAA,MAAM,EAAE,GADkB;AAE1BI,cAAAA,KAAK,EAAE,YAAMC;AAFa,aAArB,CAxCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;eA+CerC,M","sourcesContent":["import express from 'express';\r\nimport bcrypt from 'bcryptjs';\r\nimport dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport db from '../models/dbconfig';\r\n\r\nconst router = express.Router();\r\ndotenv.config();\r\n\r\nrouter.post('/', async (req, res) => {\r\n  const { password } = req.body;\r\n  const salt = await bcrypt.genSalt(10);\r\n  const hash = await bcrypt.hash(password, salt);\r\n\r\n  const queryText = `INSERT INTO users(\r\n    first_name, \r\n    last_name, \r\n    other_name, \r\n    email, \r\n    password, \r\n    phone_number, \r\n    passport_url, \r\n    is_admin) \r\n    VALUES($1, $2, $3, $4, $5, $6, $7, $8) \r\n    RETURNING *`;\r\n\r\n  const values = [\r\n    req.body.firstname,\r\n    req.body.lastname,\r\n    req.body.othername,\r\n    req.body.email,\r\n    hash,\r\n    req.body.phoneNumber,\r\n    req.body.passportUrl,\r\n    req.body.isAdmin,\r\n  ];\r\n\r\n  try {\r\n    const { rows } = await db.query(queryText, values);\r\n    const token = jwt.sign(rows[0], process.env.JWT_PRIVATE_KEY);\r\n\r\n    return res.status(201).json({\r\n      status: 201,\r\n      data: [{\r\n        token,\r\n        user: rows[0],\r\n      }],\r\n    });\r\n  } catch (error) {\r\n    return res.status(422).json({\r\n      status: 422,\r\n      error: error.detail,\r\n    });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"file":"auth.js"}