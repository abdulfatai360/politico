{"version":3,"sources":["../../src/migrations/createTables.js"],"names":["dotenv","config","pool","Pool","connectionString","process","env","DATABASE_URL","query","queryText","dbResponse","console","log","end","on","createPartyTable","createOfficeTable","createUsersTable","exit"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;AAEAA,gBAAOC,MAAP;;AACA,IAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAS;AACpBC,EAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC,YAAZ,IAA4B;AAD1B,CAAT,CAAb;;SAIeC,K;;;;;;;0BAAf,iBAAqBC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE6BP,IAAI,CAACM,KAAL,CAAWC,SAAX,CAF7B;;AAAA;AAEUC,YAAAA,UAFV;AAGIC,YAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ,EAHJ,CAII;;AAJJ;AAAA;;AAAA;AAAA;AAAA;AAMIC,YAAAA,OAAO,CAACC,GAAR;AACAV,YAAAA,IAAI,CAACW,GAAL;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWAX,IAAI,CAACY,EAAL,CAAQ,SAAR,EAAmB,YAAM;AACvBH,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,CAFD;;SAIeG,gB;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQN,YAAAA,SADR;AAQED,YAAAA,KAAK,CAACC,SAAD,CAAL;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAWeO,iB;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQP,YAAAA,SADR;AAOED,YAAAA,KAAK,CAACC,SAAD,CAAL;;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAUeQ,gB;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQR,YAAAA,SADR;AAaED,YAAAA,KAAK,CAACC,SAAD,CAAL;;AAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBAP,IAAI,CAACY,EAAL,CAAQ,QAAR,EAAkB,YAAM;AACtBH,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAP,EAAAA,OAAO,CAACa,IAAR,CAAa,CAAb;AACD,CAHD","sourcesContent":["import '@babel/polyfill';\r\nimport { Pool } from 'pg';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL || 'postgres://postgres:postgresdb01@127.0.0.1:5433/politico',\r\n});\r\n\r\nasync function query(queryText) {\r\n  try {\r\n    const dbResponse = await pool.query(queryText);\r\n    console.log(dbResponse);\r\n    // pool.end();\r\n  } catch (error) {\r\n    console.log(error);\r\n    pool.end();\r\n  }\r\n}\r\n\r\npool.on('connect', () => {\r\n  console.log('Connected to Database');\r\n});\r\n\r\nasync function createPartyTable() {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS party (\r\n    id SERIAL PRIMARY KEY,\r\n    name VARCHAR(255) UNIQUE NOT NULL,\r\n    hq_address VARCHAR NOT NULL,\r\n    logo_url VARCHAR NOT NULL\r\n  )`;\r\n\r\n  query(queryText);\r\n}\r\n\r\nasync function createOfficeTable() {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS office (\r\n    id SERIAL PRIMARY KEY,\r\n    type VARCHAR(128) NOT NULL,\r\n    name VARCHAR(255) UNIQUE NOT NULL\r\n  )`;\r\n\r\n  query(queryText);\r\n}\r\n\r\nasync function createUsersTable() {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS users (\r\n    id SERIAL PRIMARY KEY,\r\n    first_name VARCHAR(255) NOT NULL,\r\n    last_name VARCHAR(255) NOT NULL,\r\n    other_name VARCHAR(255),\r\n    email VARCHAR(255) UNIQUE NOT NULL,\r\n    password VARCHAR NOT NULL,\r\n    phone_number VARCHAR(128) NOT NULL,\r\n    passport_url VARCHAR NOT NULL,\r\n    is_admin BOOLEAN\r\n  )`;\r\n\r\n  query(queryText);\r\n}\r\n\r\npool.on('remove', () => {\r\n  console.log('Database client disconnected');\r\n  process.exit(0);\r\n});\r\n"],"file":"createTables.js"}