{"version":3,"sources":["../../src/controllers/office.js"],"names":["Office","req","res","body","type","name","queryStr","db","query","rows","status","json","data","error","Number","params","id","rowCount","detail"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;IAEMA,M;;;;;;;;;;;;+CACgBC,G,EAAKC,G;;;;;;;4BACAD,GAAG,CAACE,I,EAAnBC,I,aAAAA,I,EAAMC,I,aAAAA,I;AACRC,gBAAAA,Q,2DACMF,I,iBAAWC,I;;;uBAGEE,aAAGC,KAAH,CAASF,QAAT,C;;;;AAAfG,gBAAAA,I,QAAAA,I;iDACDP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BE,kBAAAA,IAAI,EAAEH;AAFoB,iBAArB,C;;;;;iDAKAP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BG,kBAAAA,KAAK,EAAE;AAFmB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOMZ,G,EAAKC,G;;;;;;;AACdI,gBAAAA,Q,2EAEUQ,MAAM,CAACb,GAAG,CAACc,MAAJ,CAAWC,EAAZ,C;;;uBAGaT,aAAGC,KAAH,CAASF,QAAT,C;;;;AAAzBG,gBAAAA,I,SAAAA,I;AAAMQ,gBAAAA,Q,SAAAA,Q;;sBACVA,QAAQ,KAAK,C;;;;;kDACRf,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BG,kBAAAA,KAAK,EAAE;AAFmB,iBAArB,C;;;kDAMFX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BE,kBAAAA,IAAI,EAAEH,IAAI,CAAC,CAAD;AAFgB,iBAArB,C;;;;;kDAKAP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BG,kBAAAA,KAAK,EAAE,aAAMK;AAFa,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOSjB,G,EAAKC,G;;;;;;;AACjBI,gBAAAA,Q;;;uBAKmBC,aAAGC,KAAH,CAASF,QAAT,C;;;;AAAfG,gBAAAA,I,SAAAA,I;kDACDP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BE,kBAAAA,IAAI,EAAEH;AAFoB,iBAArB,C;;;;;kDAKAP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BG,kBAAAA,KAAK,EAAE,aAAMK;AAFa,iBAArB,C;;;;;;;;;;;;;;;;;;;;;eAQElB,M","sourcesContent":["import { db } from '../models/dbconfig';\r\n\r\nclass Office {\r\n  static async create(req, res) {\r\n    const { type, name } = req.body;\r\n    const queryStr = `INSERT INTO office(type, name)\r\n      VALUES('${type}', '${name}') RETURNING *`;\r\n\r\n    try {\r\n      const { rows } = await db.query(queryStr);\r\n      return res.status(201).json({\r\n        status: 201,\r\n        data: rows,\r\n      });\r\n    } catch (error) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Office already exists in database',\r\n      });\r\n    }\r\n  }\r\n\r\n  static async get(req, res) {\r\n    const queryStr = `SELECT id, type, name \r\n      FROM office \r\n      WHERE id = '${Number(req.params.id)}'`;\r\n\r\n    try {\r\n      const { rows, rowCount } = await db.query(queryStr);\r\n      if (rowCount === 0) {\r\n        return res.status(404).json({\r\n          status: 404,\r\n          error: 'Requested party not found in database',\r\n        });\r\n      }\r\n\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: rows[0],\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: error.detail,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getAll(req, res) {\r\n    const queryStr = `SELECT id, type, name \r\n      FROM office\r\n      ORDER BY id ASC`;\r\n\r\n    try {\r\n      const { rows } = await db.query(queryStr);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: rows,\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: error.detail,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default Office;\r\n"],"file":"office.js"}