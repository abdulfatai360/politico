{"version":3,"sources":["../../src/controllers/office.js"],"names":["Office","req","res","body","type","name","status","json","error","allOffices","officeDb","findAll","duplicate","find","elem","office","create","data"],"mappings":";;;;;;;AAAA;;;;;;;;;;IAEMA,M;;;;;;;;;yBACQC,G,EAAKC,G,EAAK;AAAA,sBACGD,GAAG,CAACE,IADP;AAAA,UACZC,IADY,aACZA,IADY;AAAA,UACNC,IADM,aACNA,IADM;;AAGpB,UAAI,CAACD,IAAL,EAAW;AACT,eAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,UAAI,CAACH,IAAL,EAAW;AACT,eAAOH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,UAAI,OAAOJ,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,UAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAOH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,UAAMC,UAAU,GAAGC,gBAASC,OAAT,EAAnB;;AACA,UAAMC,SAAS,GAAGH,UAAU,CAACI,IAAX,CAAgB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACT,IAAL,KAAcA,IAAlB;AAAA,OAApB,CAAlB;;AACA,UAAIO,SAAJ,EAAe;AACb,eAAOV,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,UAAMO,MAAM,GAAGL,gBAASM,MAAT,CAAgBf,GAAG,CAACE,IAApB,CAAf;;AACA,aAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,QAAAA,MAAM,EAAE,GADkB;AAE1BW,QAAAA,IAAI,EAAE,CAACF,MAAD;AAFoB,OAArB,CAAP;AAID;;;;;;eAGYf,M","sourcesContent":["import officeDb from '../models/office';\r\n\r\nclass Office {\r\n  static post(req, res) {\r\n    const { type, name } = req.body;\r\n\r\n    if (!type) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Office type is required',\r\n      });\r\n    }\r\n\r\n    if (!name) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Office name is required',\r\n      });\r\n    }\r\n\r\n    if (typeof type !== 'string') {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Office type is invalid',\r\n      });\r\n    }\r\n\r\n    if (typeof name !== 'string') {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Office name is invalid',\r\n      });\r\n    }\r\n\r\n    const allOffices = officeDb.findAll();\r\n    const duplicate = allOffices.find(elem => elem.name === name);\r\n    if (duplicate) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Office name already exist',\r\n      });\r\n    }\r\n\r\n    const office = officeDb.create(req.body);\r\n    return res.status(201).json({\r\n      status: 201,\r\n      data: [office],\r\n    });\r\n  }\r\n}\r\n\r\nexport default Office;\r\n"],"file":"office.js"}