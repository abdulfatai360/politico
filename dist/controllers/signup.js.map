{"version":3,"sources":["../../src/controllers/signup.js"],"names":["dotenv","config","signup","req","res","password","body","bcrypt","genSalt","salt","hash","console","log","queryText","values","firstname","lastname","othername","email","phoneNumber","passportUrl","isAdmin","db","query","rows","token","jwt","sign","process","env","JWT_SECRET_KEY","header","status","json","data","user","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEAA,gBAAOC,MAAP;;SAEeC,M;;;;;;;0BAAf,iBAAsBC,GAAtB,EAA2BC,GAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,QADV,GACuBF,GAAG,CAACG,IAD3B,CACUD,QADV;AAAA;AAAA,mBAGqBE,kBAAOC,OAAP,CAAe,EAAf,CAHrB;;AAAA;AAGQC,YAAAA,IAHR;AAAA;AAAA,mBAIqBF,kBAAOG,IAAP,CAAYL,QAAZ,EAAsBI,IAAtB,CAJrB;;AAAA;AAIQC,YAAAA,IAJR;AAKEC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEMG,YAAAA,SAPR;AAaQC,YAAAA,MAbR,GAaiB,CACbX,GAAG,CAACG,IAAJ,CAASS,SADI,EAEbZ,GAAG,CAACG,IAAJ,CAASU,QAFI,EAGbb,GAAG,CAACG,IAAJ,CAASW,SAHI,EAIbd,GAAG,CAACG,IAAJ,CAASY,KAJI,EAKbR,IALa,EAMbP,GAAG,CAACG,IAAJ,CAASa,WANI,EAObhB,GAAG,CAACG,IAAJ,CAASc,WAPI,EAQbjB,GAAG,CAACG,IAAJ,CAASe,OARI,CAbjB;AAAA;AAAA;AAAA,mBAyB2BC,aAAGC,KAAH,CAASV,SAAT,EAAoBC,MAApB,CAzB3B;;AAAA;AAAA;AAyBYU,YAAAA,IAzBZ,QAyBYA,IAzBZ;AA0BUC,YAAAA,KA1BV,GA0BkBC,sBAAIC,IAAJ,CAASH,IAAI,CAAC,CAAD,CAAb,EAAkBI,OAAO,CAACC,GAAR,CAAYC,cAA9B,CA1BlB;AA2BInB,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBa,KAArB;AA3BJ,6CA6BWrB,GAAG,CAAC2B,MAAJ,CAAW,cAAX,EAA2BN,KAA3B,EAAkCO,MAAlC,CAAyC,GAAzC,EAA8CC,IAA9C,CAAmD;AACxDD,cAAAA,MAAM,EAAE,GADgD;AAExDE,cAAAA,IAAI,EAAE,CAAC;AACLT,gBAAAA,KAAK,EAALA,KADK;AAELU,gBAAAA,IAAI,EAAEX,IAAI,CAAC,CAAD;AAFL,eAAD;AAFkD,aAAnD,CA7BX;;AAAA;AAAA;AAAA;AAqCIb,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AArCJ,6CAsCWR,GAAG,CAAC4B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAAA,MAAM,EAAE,GADkB;AAE1BI,cAAAA,KAAK;AAFqB,aAArB,CAtCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;eA6CelC,M","sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport { db } from '../models/dbconfig';\r\n\r\ndotenv.config();\r\n\r\nasync function signup(req, res) {\r\n  const { password } = req.body;\r\n\r\n  const salt = await bcrypt.genSalt(10);\r\n  const hash = await bcrypt.hash(password, salt);\r\n  console.log(hash);\r\n\r\n  const queryText = `INSERT INTO users(\r\n    first_name, last_name, other_name, email, \r\n    password, phone_number, passport_url, is_admin) \r\n    VALUES($1, $2, $3, $4, $5, $6, $7, $8) \r\n    RETURNING *`;\r\n\r\n  const values = [\r\n    req.body.firstname,\r\n    req.body.lastname,\r\n    req.body.othername,\r\n    req.body.email,\r\n    hash,\r\n    req.body.phoneNumber,\r\n    req.body.passportUrl,\r\n    req.body.isAdmin,\r\n  ];\r\n\r\n  try {\r\n    const { rows } = await db.query(queryText, values);\r\n    const token = jwt.sign(rows[0], process.env.JWT_SECRET_KEY);\r\n    console.log('token', token);\r\n\r\n    return res.header('x-auth-token', token).status(201).json({\r\n      status: 201,\r\n      data: [{\r\n        token,\r\n        user: rows[0],\r\n      }],\r\n    });\r\n  } catch (error) {\r\n    console.log('hey');\r\n    return res.status(500).json({\r\n      status: 500,\r\n      error,\r\n    });\r\n  }\r\n}\r\n\r\nexport default signup;\r\n"],"file":"signup.js"}