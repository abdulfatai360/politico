{"version":3,"sources":["../../src/controllers/party.js"],"names":["Party","req","res","body","name","hqAddress","logoUrl","queryStr","db","query","rows","status","json","data","error","id","Number","params","rowCount","message","result","detail","newName","console","log"],"mappings":"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","sourcesContent":["import db from '../models/dbconfig';\r\n\r\nclass Party {\r\n  static async create(req, res) {\r\n    const { name, hqAddress, logoUrl } = req.body;\r\n\r\n    const queryStr = `INSERT INTO party(name, hq_address, logo_url)\r\n      VALUES('${name}', '${hqAddress}', '${logoUrl}') \r\n      RETURNING id, name`;\r\n\r\n    try {\r\n      const { rows } = await db.query(queryStr);\r\n      return res.status(201).json({\r\n        status: 201,\r\n        data: rows,\r\n      });\r\n    } catch (error) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Party already exists in database',\r\n      });\r\n    }\r\n  }\r\n\r\n  static async get(req, res) {\r\n    const id = Number(req.params.id);\r\n    let result;\r\n\r\n    const queryStr = `SELECT id, name, logo_url \r\n      FROM party \r\n      WHERE id = '${id}'`;\r\n\r\n    try {\r\n      const { rows, rowCount } = await db.query(queryStr);\r\n      if (rowCount === 0) {\r\n        return res.status(404).json({\r\n          status: 404,\r\n          message: 'Requested party not found in database',\r\n        });\r\n      }\r\n      result = rows;\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: error.detail,\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      data: result,\r\n    });\r\n  }\r\n\r\n  static async getAll(req, res) {\r\n    const queryStr = `SELECT id, name, logo_url \r\n      FROM party\r\n      ORDER BY id ASC`;\r\n\r\n    try {\r\n      const { rows } = await db.query(queryStr);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: rows,\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: error.detail,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async updateName(req, res) {\r\n    const id = Number(req.params.id);\r\n    const newName = req.body.name;\r\n\r\n    const queryStr = `UPDATE party \r\n      SET name = '${newName}' \r\n      WHERE id = '${id}' \r\n      RETURNING id, name`;\r\n\r\n    try {\r\n      const { rows } = await db.query(queryStr);\r\n      console.log('Hello');\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: rows,\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async delete(req, res) {\r\n    const id = Number(req.params.id);\r\n    const queryStr = `DELETE FROM party WHERE id = '${id}'`;\r\n\r\n    try {\r\n      await db.query(queryStr);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: 'Party deleted successfully.',\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: error.detail,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default Party;\r\n"],"file":"party.js"}