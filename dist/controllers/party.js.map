{"version":3,"sources":["../../src/controllers/party.js"],"names":["Party","req","res","body","name","hqAddress","logoUrl","status","json","error","party","partyDb","create","data","id","params","Number","isNaN","findOne","findAll","length","filter","map","Object","keys","update","response","delete"],"mappings":"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","sourcesContent":["import partyDb from '../models/party';\r\n\r\nclass Party {\r\n  static post(req, res) {\r\n    const { name, hqAddress, logoUrl } = req.body;\r\n\r\n    if (!name) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Party name is required',\r\n      });\r\n    }\r\n\r\n    if (!hqAddress) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Party address field is required',\r\n      });\r\n    }\r\n\r\n    if (!logoUrl) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Party logo field is required',\r\n      });\r\n    }\r\n\r\n    if (typeof name !== 'string') {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Party name is invalid',\r\n      });\r\n    }\r\n\r\n    if (typeof hqAddress !== 'string') {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Party address field is invalid',\r\n      });\r\n    }\r\n\r\n    if (typeof logoUrl !== 'string') {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Party logo field is invalid',\r\n      });\r\n    }\r\n\r\n    const party = partyDb.create(req.body);\r\n    return res.status(201).json({\r\n      status: 201,\r\n      data: [party],\r\n    });\r\n  }\r\n\r\n  static getOne(req, res) {\r\n    let { id } = req.params;\r\n    id = Number(id);\r\n\r\n    if (Number.isNaN(id)) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Party ID is invalid',\r\n      });\r\n    }\r\n\r\n    const party = partyDb.findOne(id);\r\n\r\n    if (!party) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Party not found',\r\n      });\r\n    }\r\n\r\n    const { name, logoUrl } = party;\r\n    return res.status(200).json({\r\n      status: 200,\r\n      data: [{ id, name, logoUrl }],\r\n    });\r\n  }\r\n\r\n  static getAll(req, res) {\r\n    if (!partyDb.findAll().length) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'No party in the Database',\r\n      });\r\n    }\r\n\r\n    const filter = partyDb.findAll()\r\n      .map(({ id, name, logoUrl }) => ({ id, name, logoUrl }));\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      data: filter,\r\n    });\r\n  }\r\n\r\n  static patch(req, res) {\r\n    if (!req.body.name) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Name field must be supplied',\r\n      });\r\n    }\r\n\r\n    if (!req.params.id) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id parameter is missing',\r\n      });\r\n    }\r\n\r\n    if (!req.params.name) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Name parameter is missing',\r\n      });\r\n    }\r\n\r\n    if (Number.isNaN(Number(req.params.id))) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Id parameter is invalid',\r\n      });\r\n    }\r\n\r\n    if (!Number.isNaN(Number(req.params.name))) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Name parameter is invalid',\r\n      });\r\n    }\r\n\r\n    if (Object.keys(req.params).length > 2 || Object.keys(req.body).length > 2) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Excess fields or parameters. Only name field can be edited',\r\n      });\r\n    }\r\n\r\n    if (Object.keys(req.params).length < 2 || Object.keys(req.body).length < 1) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Inadequate parameters field submission',\r\n      });\r\n    }\r\n\r\n    const party = partyDb.findOne(Number(req.params.id));\r\n\r\n    if (!party) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Party not found',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      data: [partyDb.update(Number(req.params.id), req.body.name)],\r\n    });\r\n  }\r\n\r\n  static delete(req, res) {\r\n    let { id } = req.params;\r\n    id = Number(id);\r\n\r\n    if (Number.isNaN(id)) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Party ID is invalid',\r\n      });\r\n    }\r\n\r\n    const party = partyDb.findOne(id);\r\n    if (!party) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Party not found',\r\n      });\r\n    }\r\n\r\n    const response = partyDb.delete(id);\r\n    return res.status(200).json({\r\n      status: 200,\r\n      data: [response],\r\n    });\r\n  }\r\n}\r\n\r\nexport default Party;\r\n"],"file":"party.js"}