{"version":3,"sources":["../../src/middleware/validateLoginCred.js"],"names":["validateLoginCred","req","res","next","body","email","password","findUserQuery","db","query","rows","rowCount","bcrypt","compare","validPassword","status","json","error"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;SAEeA,iB;;;;;;;0BAAf,iBAAiCC,GAAjC,EAAsCC,GAAtC,EAA2CC,IAA3C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAC8BF,GAAG,CAACG,IADlC,EACUC,KADV,aACUA,KADV,EACiBC,QADjB,aACiBA,QADjB;AAEQC,YAAAA,aAFR,8CAE4DF,KAF5D;AAAA;AAAA;AAAA,mBAKqCG,aAAGC,KAAH,CAASF,aAAT,CALrC;;AAAA;AAAA;AAKYG,YAAAA,IALZ,QAKYA,IALZ;AAKkBC,YAAAA,QALlB,QAKkBA,QALlB;AAAA;AAAA,mBAMgCC,kBAAOC,OAAP,CAAeP,QAAf,EAAyBI,IAAI,CAAC,CAAD,CAAJ,CAAQJ,QAAjC,CANhC;;AAAA;AAMUQ,YAAAA,aANV;;AAAA,kBAQQH,QAAQ,KAAK,CAAb,IAAkB,CAACG,aAR3B;AAAA;AAAA;AAAA;;AAAA,6CASaZ,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAAA,MAAM,EAAE,GADkB;AAE1BE,cAAAA,KAAK,EAAE;AAFmB,aAArB,CATb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAeWf,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAAA,MAAM,EAAE,GADkB;AAE1BE,cAAAA,KAAK;AAFqB,aAArB,CAfX;;AAAA;AAAA,6CAqBSd,IAAI,EArBb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;eAwBeH,iB","sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport { db } from '../models/dbconfig';\r\n\r\nasync function validateLoginCred(req, res, next) {\r\n  const { email, password } = req.body;\r\n  const findUserQuery = `SELECT * FROM users WHERE email='${email}'`;\r\n\r\n  try {\r\n    const { rows, rowCount } = await db.query(findUserQuery);\r\n    const validPassword = await bcrypt.compare(password, rows[0].password);\r\n\r\n    if (rowCount === 0 && !validPassword) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Invalid email or password',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      status: 500,\r\n      error,\r\n    });\r\n  }\r\n\r\n  return next();\r\n}\r\n\r\nexport default validateLoginCred;\r\n"],"file":"validateLoginCred.js"}