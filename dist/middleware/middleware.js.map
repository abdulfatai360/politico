{"version":3,"sources":["../../src/middleware/middleware.js"],"names":["Middleware","req","res","next","name","body","status","json","error","hqAddress","logoUrl","id","params","Number","isNaN","type"],"mappings":";;;;;;;;;;;;;IAAMA,U;;;;;;;;;iCACgBC,G,EAAKC,G,EAAKC,I,EAAM;AAAA,UAC1BC,IAD0B,GACjBH,GAAG,CAACI,IADa,CAC1BD,IAD0B;;AAGlC,UAAI,CAACA,IAAL,EAAW;AACT,eAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,aAAOL,IAAI,EAAX;AACD;;;oCAEsBF,G,EAAKC,G,EAAKC,I,EAAM;AAAA,UAC7BM,SAD6B,GACfR,GAAG,CAACI,IADW,CAC7BI,SAD6B;;AAGrC,UAAI,CAACA,SAAL,EAAgB;AACd,eAAOP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,aAAOL,IAAI,EAAX;AACD;;;gCAEkBF,G,EAAKC,G,EAAKC,I,EAAM;AAAA,UACzBO,OADyB,GACbT,GAAG,CAACI,IADS,CACzBK,OADyB;;AAGjC,UAAI,CAACA,OAAL,EAAc;AACZ,eAAOR,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,aAAOL,IAAI,EAAX;AACD;;;oCAEsBF,G,EAAKC,G,EAAKC,I,EAAM;AAAA,UAC/BQ,EAD+B,GACxBV,GAAG,CAACW,MADoB,CAC/BD,EAD+B;AAErCA,MAAAA,EAAE,GAAGE,MAAM,CAACF,EAAD,CAAX;;AAEA,UAAIE,MAAM,CAACC,KAAP,CAAaH,EAAb,CAAJ,EAAsB;AACpB,eAAOT,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,aAAOL,IAAI,EAAX;AACD;;;sCAEwBF,G,EAAKC,G,EAAKC,I,EAAM;AAAA,UAC/BC,IAD+B,GACtBH,GAAG,CAACW,MADkB,CAC/BR,IAD+B;;AAGvC,UAAIA,IAAI,KAAK,MAAb,EAAqB;AACnB,eAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,aAAOL,IAAI,EAAX;AACD;;;uCAEyBF,G,EAAKC,G,EAAKC,I,EAAM;AAAA,UAChCY,IADgC,GACvBd,GAAG,CAACI,IADmB,CAChCU,IADgC;;AAGxC,UAAI,CAACA,IAAL,EAAW;AACT,eAAOb,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;;AAED,aAAOL,IAAI,EAAX;AACD;;;;;;eAGYH,U","sourcesContent":["class Middleware {\r\n  static validateName(req, res, next) {\r\n    const { name } = req.body;\r\n\r\n    if (!name) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Name field is required',\r\n      });\r\n    }\r\n\r\n    return next();\r\n  }\r\n\r\n  static validateAddress(req, res, next) {\r\n    const { hqAddress } = req.body;\r\n\r\n    if (!hqAddress) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Address field is required',\r\n      });\r\n    }\r\n\r\n    return next();\r\n  }\r\n\r\n  static validateUrl(req, res, next) {\r\n    const { logoUrl } = req.body;\r\n\r\n    if (!logoUrl) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Image field is required',\r\n      });\r\n    }\r\n\r\n    return next();\r\n  }\r\n\r\n  static validateIdParam(req, res, next) {\r\n    let { id } = req.params;\r\n    id = Number(id);\r\n\r\n    if (Number.isNaN(id)) {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'ID parameter is invalid. Must be a number',\r\n      });\r\n    }\r\n\r\n    return next();\r\n  }\r\n\r\n  static validateNameParam(req, res, next) {\r\n    const { name } = req.params;\r\n\r\n    if (name !== 'name') {\r\n      return res.status(422).json({\r\n        status: 422,\r\n        error: 'Invalid parameter. Only name field can be updated',\r\n      });\r\n    }\r\n\r\n    return next();\r\n  }\r\n\r\n  static validateOfficeType(req, res, next) {\r\n    const { type } = req.body;\r\n\r\n    if (!type) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Type field is required',\r\n      });\r\n    }\r\n\r\n    return next();\r\n  }\r\n}\r\n\r\nexport default Middleware;\r\n"],"file":"middleware.js"}